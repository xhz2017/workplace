package com.luo.exception;

import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class ThreadPoolDemo {
	public static void main(String[] args) throws InterruptedException,
			ExecutionException {
		//DemoCallable();
		public static void main(String[] args) {
			//创建线程池对象
			ExecutorService service = Executors.newFixedThreadPool(2);//包含2个线程对象
			//创建Runnable实例对象
			MyRunnable r = new MyRunnable();
			
			//自己创建线程对象的方式
			//Thread t = new Thread(r);
			//t.start(); ---> 调用MyRunnable中的run()
			
			//从线程池中获取线程对象,然后调用MyRunnable中的run()
			service.submit(r);
			//再获取个线程对象，调用MyRunnable中的run()
			service.submit(r);
			service.submit(r);
	//注意：submit方法调用结束后，程序并不终止，是因为线程池控制了线程的关闭。将使用完的线程又归还到了线程池中

	//关闭线程池
			//service.shutdown();
		}

	}

	private static void DemoCallable() throws InterruptedException,
			ExecutionException {
		// 创建线程池对象
		ExecutorService threadPool = Executors.newFixedThreadPool(2);

		// 创建一个Callable接口子类对象
		// MyCallable c = new MyCallable();
		MyCallablexie c = new MyCallablexie(100, 200);
		MyCallablexie c2 = new MyCallablexie(10, 20);

		// 获取线程池中的线程，调用Callable接口子类对象中的call()方法, 完成求和操作
		// <Integer> Future<Integer> submit(Callable<Integer> task)
		// Future 结果对象
		Future<Integer> result = threadPool.submit(c);
		// 此 Future 的 get 方法所返回的结果类型
		Integer sum = result.get();
		System.out.println("sum=" + sum);

		// 再演示
		result = threadPool.submit(c2);
		sum = result.get();
		System.out.println("sum=" + sum);
		// 关闭线程池(可以不关闭)
		threadPool.shutdown();
	}

}

